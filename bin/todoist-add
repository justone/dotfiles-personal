#!/usr/bin/env bb

#_{:clj-kondo/ignore [:namespace-name-mismatch]}
(ns todoist
  (:require [babashka.deps :as deps]
            [cheshire.core :as json]
            [clojure.pprint :refer [pprint]]
            [org.httpkit.client :as http]))

(deps/add-deps '{:deps {io.github.justone/bb-scripts {:sha "861bfc964ef541c4c8f14b880bf98fae90fb8537"}}})
(require '[lib.script.alpha :as sa])

(def ^:private api-key-name
  "TODOIST_API_TOKEN")

(defn create-task-req
  [api-key task]
  {:url "https://api.todoist.com/rest/v2/tasks"
   :method :post
   :headers {"Authorization" (str "Bearer " api-key)
             "Content-Type" "application/json"}
   :body (json/encode task)})

(comment
  (def resp
    (-> (create-task-req
          (System/getenv api-key-name)
          {:content "Task title"
           :description "Description"
           :project_id "2274483841"
           :labels ["Work"]})
        http/request
        deref))
  (-> resp
      :body
      (json/decode true)
      pprint))

(defn add
  [{{:keys [content description label project-id]} :options}]
  (let [api-key (System/getenv api-key-name)]
    (cond
      (nil? api-key)
      (throw (ex-info (str "API key not found, set the " api-key-name " environment variable.") {:babashka/exit 1}))

      :else
      (let [task (merge {:content content
                         :project_id project-id
                         :labels label}
                        (when description
                          {:description description}))
            response @(http/request (create-task-req api-key task))
            todo (-> response
                     :body
                     (json/decode true))]
        (pprint (select-keys todo [:id :created_at :labels :content :description]))))))

(def opts
  {:cli-options [["-h" "--help" "Show help."]
                 ["-P" "--project-id id" "Project ID."
                  :missing "Must supply a project id"]
                 ["-c" "--content CONTENT" "Content of todo (title)."
                  :missing "Must supply content"]
                 ["-d" "--description DESC" "Optional description."]
                 ["-l" "--label LABEL" "Labels to apply."
                  :multi true :default [] :update-fn conj] ]
   :help (str "Add a todo to todoist.\n\nMust set the " api-key-name " environment variable.")})


(when (= *file* (System/getProperty "babashka.file"))
  (add (sa/simple-main opts)))

; vim: set ft=clojure:
